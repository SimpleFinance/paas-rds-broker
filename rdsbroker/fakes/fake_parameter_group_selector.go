// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-rds-broker/rdsbroker"
)

type FakeParameterGroupSelector struct {
	SelectParameterGroupStub        func(servicePlan rdsbroker.ServicePlan, extensions []string) (string, bool, error)
	selectParameterGroupMutex       sync.RWMutex
	selectParameterGroupArgsForCall []struct {
		servicePlan rdsbroker.ServicePlan
		extensions  []string
	}
	selectParameterGroupReturns struct {
		result1 string
		result2 bool
		result3 error
	}
	selectParameterGroupReturnsOnCall map[int]struct {
		result1 string
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeParameterGroupSelector) SelectParameterGroup(servicePlan rdsbroker.ServicePlan, extensions []string) (string, bool, error) {
	var extensionsCopy []string
	if extensions != nil {
		extensionsCopy = make([]string, len(extensions))
		copy(extensionsCopy, extensions)
	}
	fake.selectParameterGroupMutex.Lock()
	ret, specificReturn := fake.selectParameterGroupReturnsOnCall[len(fake.selectParameterGroupArgsForCall)]
	fake.selectParameterGroupArgsForCall = append(fake.selectParameterGroupArgsForCall, struct {
		servicePlan rdsbroker.ServicePlan
		extensions  []string
	}{servicePlan, extensionsCopy})
	fake.recordInvocation("SelectParameterGroup", []interface{}{servicePlan, extensionsCopy})
	fake.selectParameterGroupMutex.Unlock()
	if fake.SelectParameterGroupStub != nil {
		return fake.SelectParameterGroupStub(servicePlan, extensions)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.selectParameterGroupReturns.result1, fake.selectParameterGroupReturns.result2, fake.selectParameterGroupReturns.result3
}

func (fake *FakeParameterGroupSelector) SelectParameterGroupCallCount() int {
	fake.selectParameterGroupMutex.RLock()
	defer fake.selectParameterGroupMutex.RUnlock()
	return len(fake.selectParameterGroupArgsForCall)
}

func (fake *FakeParameterGroupSelector) SelectParameterGroupArgsForCall(i int) (rdsbroker.ServicePlan, []string) {
	fake.selectParameterGroupMutex.RLock()
	defer fake.selectParameterGroupMutex.RUnlock()
	return fake.selectParameterGroupArgsForCall[i].servicePlan, fake.selectParameterGroupArgsForCall[i].extensions
}

func (fake *FakeParameterGroupSelector) SelectParameterGroupReturns(result1 string, result2 bool, result3 error) {
	fake.SelectParameterGroupStub = nil
	fake.selectParameterGroupReturns = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeParameterGroupSelector) SelectParameterGroupReturnsOnCall(i int, result1 string, result2 bool, result3 error) {
	fake.SelectParameterGroupStub = nil
	if fake.selectParameterGroupReturnsOnCall == nil {
		fake.selectParameterGroupReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
			result3 error
		})
	}
	fake.selectParameterGroupReturnsOnCall[i] = struct {
		result1 string
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeParameterGroupSelector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.selectParameterGroupMutex.RLock()
	defer fake.selectParameterGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeParameterGroupSelector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rdsbroker.ParameterGroupSelector = new(FakeParameterGroupSelector)
